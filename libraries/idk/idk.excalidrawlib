{
  "type": "excalidrawlib",
  "version": 2,
  "source": "https://excalidraw.com",
  "libraryItems": [
    {
      "id": "LSPC4Fc6JPnw1KLRzW8kV",
      "status": "published",
      "elements": [
        {
          "id": "z_eBzMyeHUrseUQE0cqWr",
          "type": "text",
          "x": -5570.394660399385,
          "y": -1667.7747468878356,
          "width": 1467.2794189453125,
          "height": 7100,
          "angle": 0,
          "strokeColor": "#1e1e1e",
          "backgroundColor": "transparent",
          "fillStyle": "solid",
          "strokeWidth": 2,
          "strokeStyle": "solid",
          "roughness": 1,
          "opacity": 100,
          "groupIds": [],
          "frameId": null,
          "index": "a6",
          "roundness": null,
          "seed": 346227134,
          "version": 4,
          "versionNonce": 771951074,
          "isDeleted": false,
          "boundElements": [],
          "updated": 1753540999266,
          "link": null,
          "locked": true,
          "text": "package com.bugtrackingsystem.serviceimpl;\n\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.modelmapper.ModelMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport com.bugtrackingsystem.dto.AddBugDTO;\nimport com.bugtrackingsystem.dto.BugDTO;\nimport com.bugtrackingsystem.exception.BugTrackingException;\nimport com.bugtrackingsystem.exception.BugTrackingException;\nimport com.bugtrackingsystem.exception.BugTrackingException;\nimport com.bugtrackingsystem.model.Bug;\nimport com.bugtrackingsystem.model.Developer;\nimport com.bugtrackingsystem.model.Project;\nimport com.bugtrackingsystem.model.TestEngineer;\nimport com.bugtrackingsystem.repository.BugRepository;\nimport com.bugtrackingsystem.repository.DeveloperRepository;\nimport com.bugtrackingsystem.repository.ProjectRepository;\nimport com.bugtrackingsystem.repository.TestEngineerRepository;\nimport com.bugtrackingsystem.service.IBugService;\nimport com.bugtrackingsystem.util.BugStatus;\nimport com.bugtrackingsystem.util.Severity;\n\nimport jakarta.transaction.Transactional;\n\n@Service\n@Transactional\npublic class BugServiceImpl implements IBugService {\n\n        @Autowired\n        BugRepository bugRepo;\n\n        @Autowired\n        ModelMapper modelMap;\n\n        @Autowired\n        ProjectRepository projectRepo;\n        @Autowired\n        DeveloperRepository devRepo;\n        @Autowired\n        TestEngineerRepository testEngRepo;\n\n        @Override\n        @Transactional\n        public BugDTO createBug(AddBugDTO bugDto) {\n                Project project = projectRepo.findById(bugDto.getProjectId())\n                                .orElseThrow(() -> new BugTrackingException(\"Project doesn't exist\"));\n                TestEngineer tester = testEngRepo.findById(bugDto.getTestEngineerId())\n                                .orElseThrow(() -> new BugTrackingException(\"TestEngineer doesn't exist\"));\n                if (!project.getTestEngineers().contains(tester)) {\n                        throw new BugTrackingException(\"tester is not authorized to created this bug\");\n                }\n                Bug bug = modelMap.map(bugDto, Bug.class);\n                bug.setProject(project);\n                project.getBugs().add(bug);\n                bug.setCreatedBy(tester);\n                tester.getBugs().add(bug);\n                bug.setStartDate(LocalDate.now());\n                bug.setLastUpdatedDate(LocalDate.now());\n                bug = bugRepo.save(bug);\n                return modelMap.map(bug, BugDTO.class);\n        }\n\n        // Updates an existing bug by mapping new data from BugDTO and saving the\n        // changes.\n        // Fetches the existing bug by ID, maps updated fields from BugDTO onto it,\n        // saves the changes, and returns the updated DTO.\n\n        // Updating the bug status\n        @Override\n        public BugDTO updateBugStatusByTester(int bugId, int testerId, BugStatus status) {\n                TestEngineer tester = testEngRepo.findById(testerId)\n                                .orElseThrow(() -> new BugTrackingException(\"Test Engineer does not exist\"));\n                Bug existingBug = bugRepo.findById(bugId)\n                                .orElseThrow(() -> new BugTrackingException(\"Bug with id : \" + bugId + \" does not exist\"));\n                if (!existingBug.getCreatedBy().equals(tester))\n                        throw new BugTrackingException(\n                                        \" The test engineer with id : \" + testerId + \" not authorized to change the status.\");\n                if (existingBug.getAssignedTo() != null)\n                        throw new BugTrackingException(\n                                        \"Tester not authorized to change the status now. Only developer can change the status after asigned to project.\");\n                existingBug.setBugStatus(status);\n                Bug updatedBug = bugRepo.save(existingBug);\n                return modelMap.map(updatedBug, BugDTO.class);\n        }\n        @Override\n        public BugDTO updateBugStatusByDev(int bugId, int devId, BugStatus status) {\n                Developer dev = devRepo.findById(devId)\n                                .orElseThrow(() -> new BugTrackingException(\"Developer does not exist\"));\n                Bug existingBug = bugRepo.findById(bugId)\n                                .orElseThrow(() -> new BugTrackingException(\"Bug with id : \" + bugId + \" does not exist\"));\n                if (!existingBug.getAssignedTo().equals(dev))\n                        throw new BugTrackingException(\n                                        \"Developer is not authorized to change the status now.\");\n                existingBug.setBugStatus(status);\n                Bug updatedBug = bugRepo.save(existingBug);\n                return modelMap.map(updatedBug, BugDTO.class);\n        }\n\n        // Updating the bug severity\n        @Override\n        public BugDTO updateBugSeverityByTester(int bugId, int testerId, Severity severity) {\n                TestEngineer tester = testEngRepo.findById(testerId)\n                                .orElseThrow(() -> new BugTrackingException(\"Test Engineer does not exist\"));\n                Bug existingBug = bugRepo.findById(bugId)\n                                .orElseThrow(() -> new BugTrackingException(\"Bug with id : \" + bugId + \" does not exist\"));\n                if (!existingBug.getCreatedBy().equals(tester))\n                        throw new BugTrackingException(\n                                        \" The test engineer with id : \" + testerId + \" not authorized to change the status.\");\n                if (existingBug.getAssignedTo() != null)\n                        throw new BugTrackingException(\n                                        \"Tester not authorized to change the status now. Only developer can change the status after asigned to project.\");\n                existingBug.setSeverity(severity);\n                Bug updatedBug = bugRepo.save(existingBug);\n                return modelMap.map(updatedBug, BugDTO.class);\n        }\n        @Override\n        public BugDTO updateBugSeverityByDevloper(int bugId, int devId, Severity severity) {\n                Developer dev = devRepo.findById(devId)\n                                .orElseThrow(() -> new BugTrackingException(\"Developer does not exist\"));\n                Bug existingBug = bugRepo.findById(bugId)\n                                .orElseThrow(() -> new BugTrackingException(\"Bug with id : \" + bugId + \" does not exist\"));\n                if (!existingBug.getAssignedTo().equals(dev))\n                        throw new BugTrackingException(\n                                        \"Developer is not authorized to change the status now.\");                \n                existingBug.setSeverity(severity);\n                Bug updatedBug = bugRepo.save(existingBug);\n                return modelMap.map(updatedBug, BugDTO.class);\n        }\n\n        // Updating the Title & Description\n        @Override\n        public BugDTO updateBug(int bugId, String title, String description) {\n                Bug existingBug = bugRepo.findById(bugId)\n                                .orElseThrow(() -> new BugTrackingException(\"Bug with id : \" + bugId + \" does not exist\"));\n                existingBug.setTitle(title);\n                existingBug.setDescription(description);\n                Bug updatedBug = bugRepo.save(existingBug);\n                return modelMap.map(updatedBug, BugDTO.class);\n        }\n\n        // Retrieves a bug by ID, maps it to BugDTO, or throws an exception if not\n        // found.\n        @Override\n        public BugDTO findBugById(Integer bugId) {\n                Bug bug = bugRepo.findById(bugId)\n                                .orElseThrow(() -> new BugTrackingException(\"Bug with id : \" + bugId + \" does not exist\"));\n                return modelMap.map(bug, BugDTO.class);\n        }\n\n        // Retrieves all bugs, maps each to BugDTO, and returns the list.\n        @Override\n        public List<BugDTO> findAllBugs() {\n                List<Bug> bugList = bugRepo.findAll();\n                List<BugDTO> bugDtoList = new ArrayList<>();\n                for (Bug bug : bugList) {\n                        bugDtoList.add(modelMap.map(bug, BugDTO.class));\n                }\n                return bugDtoList;\n        }\n\n        @Override\n        public List<BugDTO> findBugsByProjectId(Integer projId) {\n                Project project = projectRepo.findById(projId)\n                                .orElseThrow(() -> new BugTrackingException(\"Project with id : \" + projId + \" does not exist\"));\n                Set<Bug> bugs = project.getBugs();\n                List<BugDTO> bugDtoList = new ArrayList<>();\n                for (Bug bug : bugs) {\n                        bugDtoList.add(modelMap.map(bug, BugDTO.class));\n                }\n                return bugDtoList;\n        }\n\n        @Override\n        public List<BugDTO> findBugsByDeveloperId(Integer devId) {\n                Developer dev = devRepo.findById(devId)\n                                .orElseThrow(() -> new BugTrackingException(\"Developer with id : \" + devId + \" does not exist\"));\n                Set<Bug> bugs = dev.getBugs();\n                List<BugDTO> bugDtoList = new ArrayList<>();\n                for (Bug bug : bugs) {\n                        bugDtoList.add(modelMap.map(bug, BugDTO.class));\n                }\n                return bugDtoList;\n        }\n\n        @Override\n        public List<BugDTO> findBugsByDeveloperIdAndStatus(Integer devId, BugStatus status) {\n                Developer dev = devRepo.findById(devId)\n                                .orElseThrow(() -> new BugTrackingException(\"Developer with id : \" + devId + \" does not exist\"));\n                Set<Bug> bugs = dev.getBugs();\n                List<BugDTO> bugDtoList = new ArrayList<>();\n                for (Bug bug : bugs) {\n                        if (bug.getBugStatus().name().equals(status))\n                                bugDtoList.add(modelMap.map(bug, BugDTO.class));\n                }\n                return bugDtoList;\n        }\n\n        @Override\n        public List<BugDTO> findBugsByStatus(BugStatus bugStatus) {\n                List<Bug> bugList = bugRepo.findByBugStatus(bugStatus);\n                List<BugDTO> bugDtoList = new ArrayList<>();\n                for (Bug bug : bugList) {\n                        bugDtoList.add(modelMap.map(bug, BugDTO.class));\n                }\n                return bugDtoList;\n        }\n\n        @Override\n        public List<BugDTO> findBugsBySeverity(Severity severity) {\n                List<Bug> bugList = bugRepo.findBugsBySeverity(severity);\n                List<BugDTO> bugDtoList = new ArrayList<>();\n                for (Bug bug : bugList) {\n                        bugDtoList.add(modelMap.map(bug, BugDTO.class));\n                }\n                return bugDtoList;\n        }\n\n        // Filters bugs by lastUpdatedDate, maps matching ones to BugDTOs, and returns\n        // the list.\n        @Override\n        public List<BugDTO> findBugsByDate(LocalDate date) {\n                List<Bug> bugList = bugRepo.findBugsByStartDate(date);\n                List<BugDTO> bugDtoList = new ArrayList<>();\n                for (Bug bug : bugList) {\n                        bugDtoList.add(modelMap.map(bug, BugDTO.class));\n                }\n                return bugDtoList;\n        }\n\n        @Override\n        public List<BugDTO> findBugsByTestEngineerId(Integer testEngId) {\n                TestEngineer tester = testEngRepo.findById(testEngId)\n                                .orElseThrow(() -> new BugTrackingException(\"Tester with id : \" + testEngId + \" does not exist\"));\n                Set<Bug> bugs = tester.getBugs();\n                List<BugDTO> bugDtoList = new ArrayList<>();\n                for (Bug b : bugs) {\n                        bugDtoList.add(modelMap.map(b, BugDTO.class));\n                }\n                return bugDtoList;\n        }\n\n        @Override\n        public List<BugDTO> findBugsByProjectIdAfterDate(Integer projId, LocalDate date) {\n                Project project = projectRepo.findById(projId)\n                                .orElseThrow(() -> new BugTrackingException(\"Project with id : \" + projId + \" does not exist\"));\n                Set<Bug> bugList = project.getBugs();\n                List<BugDTO> bugDtoList = new ArrayList<>();\n                for (Bug bug : bugList) {\n                        if (bug.getLastUpdatedDate().isAfter(date))\n                                bugDtoList.add(modelMap.map(bug, BugDTO.class));\n                }\n                return bugDtoList;\n        }\n\n        @Override\n        public void deleteBugById(Integer bugId) throws BugTrackingException {\n                Bug bug = bugRepo.findById(bugId)\n                                .orElseThrow(() -> new BugTrackingException(\"Bug with id \" + bugId + \" does not exist\"));\n\n                // We have to remove bugs from tester\n                TestEngineer tester = bug.getCreatedBy();\n                tester.getBugs().remove(bug);\n\n                // We have to remove bugs from developer may be developer is not assigned to bug\n                // so we have to check.\n                Developer dev = bug.getAssignedTo();\n                if (dev != null)\n                        dev.getBugs().remove(bug);\n\n                // We have to remove bugs from project.\n                Project project = bug.getProject();\n                project.getBugs().remove(bug);\n\n                bugRepo.delete(bug);\n        }\n\n}\n",
          "fontSize": 20,
          "fontFamily": 5,
          "textAlign": "left",
          "verticalAlign": "top",
          "containerId": null,
          "originalText": "package com.bugtrackingsystem.serviceimpl;\n\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.modelmapper.ModelMapper;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport com.bugtrackingsystem.dto.AddBugDTO;\nimport com.bugtrackingsystem.dto.BugDTO;\nimport com.bugtrackingsystem.exception.BugTrackingException;\nimport com.bugtrackingsystem.exception.BugTrackingException;\nimport com.bugtrackingsystem.exception.BugTrackingException;\nimport com.bugtrackingsystem.model.Bug;\nimport com.bugtrackingsystem.model.Developer;\nimport com.bugtrackingsystem.model.Project;\nimport com.bugtrackingsystem.model.TestEngineer;\nimport com.bugtrackingsystem.repository.BugRepository;\nimport com.bugtrackingsystem.repository.DeveloperRepository;\nimport com.bugtrackingsystem.repository.ProjectRepository;\nimport com.bugtrackingsystem.repository.TestEngineerRepository;\nimport com.bugtrackingsystem.service.IBugService;\nimport com.bugtrackingsystem.util.BugStatus;\nimport com.bugtrackingsystem.util.Severity;\n\nimport jakarta.transaction.Transactional;\n\n@Service\n@Transactional\npublic class BugServiceImpl implements IBugService {\n\n        @Autowired\n        BugRepository bugRepo;\n\n        @Autowired\n        ModelMapper modelMap;\n\n        @Autowired\n        ProjectRepository projectRepo;\n        @Autowired\n        DeveloperRepository devRepo;\n        @Autowired\n        TestEngineerRepository testEngRepo;\n\n        @Override\n        @Transactional\n        public BugDTO createBug(AddBugDTO bugDto) {\n                Project project = projectRepo.findById(bugDto.getProjectId())\n                                .orElseThrow(() -> new BugTrackingException(\"Project doesn't exist\"));\n                TestEngineer tester = testEngRepo.findById(bugDto.getTestEngineerId())\n                                .orElseThrow(() -> new BugTrackingException(\"TestEngineer doesn't exist\"));\n                if (!project.getTestEngineers().contains(tester)) {\n                        throw new BugTrackingException(\"tester is not authorized to created this bug\");\n                }\n                Bug bug = modelMap.map(bugDto, Bug.class);\n                bug.setProject(project);\n                project.getBugs().add(bug);\n                bug.setCreatedBy(tester);\n                tester.getBugs().add(bug);\n                bug.setStartDate(LocalDate.now());\n                bug.setLastUpdatedDate(LocalDate.now());\n                bug = bugRepo.save(bug);\n                return modelMap.map(bug, BugDTO.class);\n        }\n\n        // Updates an existing bug by mapping new data from BugDTO and saving the\n        // changes.\n        // Fetches the existing bug by ID, maps updated fields from BugDTO onto it,\n        // saves the changes, and returns the updated DTO.\n\n        // Updating the bug status\n        @Override\n        public BugDTO updateBugStatusByTester(int bugId, int testerId, BugStatus status) {\n                TestEngineer tester = testEngRepo.findById(testerId)\n                                .orElseThrow(() -> new BugTrackingException(\"Test Engineer does not exist\"));\n                Bug existingBug = bugRepo.findById(bugId)\n                                .orElseThrow(() -> new BugTrackingException(\"Bug with id : \" + bugId + \" does not exist\"));\n                if (!existingBug.getCreatedBy().equals(tester))\n                        throw new BugTrackingException(\n                                        \" The test engineer with id : \" + testerId + \" not authorized to change the status.\");\n                if (existingBug.getAssignedTo() != null)\n                        throw new BugTrackingException(\n                                        \"Tester not authorized to change the status now. Only developer can change the status after asigned to project.\");\n                existingBug.setBugStatus(status);\n                Bug updatedBug = bugRepo.save(existingBug);\n                return modelMap.map(updatedBug, BugDTO.class);\n        }\n        @Override\n        public BugDTO updateBugStatusByDev(int bugId, int devId, BugStatus status) {\n                Developer dev = devRepo.findById(devId)\n                                .orElseThrow(() -> new BugTrackingException(\"Developer does not exist\"));\n                Bug existingBug = bugRepo.findById(bugId)\n                                .orElseThrow(() -> new BugTrackingException(\"Bug with id : \" + bugId + \" does not exist\"));\n                if (!existingBug.getAssignedTo().equals(dev))\n                        throw new BugTrackingException(\n                                        \"Developer is not authorized to change the status now.\");\n                existingBug.setBugStatus(status);\n                Bug updatedBug = bugRepo.save(existingBug);\n                return modelMap.map(updatedBug, BugDTO.class);\n        }\n\n        // Updating the bug severity\n        @Override\n        public BugDTO updateBugSeverityByTester(int bugId, int testerId, Severity severity) {\n                TestEngineer tester = testEngRepo.findById(testerId)\n                                .orElseThrow(() -> new BugTrackingException(\"Test Engineer does not exist\"));\n                Bug existingBug = bugRepo.findById(bugId)\n                                .orElseThrow(() -> new BugTrackingException(\"Bug with id : \" + bugId + \" does not exist\"));\n                if (!existingBug.getCreatedBy().equals(tester))\n                        throw new BugTrackingException(\n                                        \" The test engineer with id : \" + testerId + \" not authorized to change the status.\");\n                if (existingBug.getAssignedTo() != null)\n                        throw new BugTrackingException(\n                                        \"Tester not authorized to change the status now. Only developer can change the status after asigned to project.\");\n                existingBug.setSeverity(severity);\n                Bug updatedBug = bugRepo.save(existingBug);\n                return modelMap.map(updatedBug, BugDTO.class);\n        }\n        @Override\n        public BugDTO updateBugSeverityByDevloper(int bugId, int devId, Severity severity) {\n                Developer dev = devRepo.findById(devId)\n                                .orElseThrow(() -> new BugTrackingException(\"Developer does not exist\"));\n                Bug existingBug = bugRepo.findById(bugId)\n                                .orElseThrow(() -> new BugTrackingException(\"Bug with id : \" + bugId + \" does not exist\"));\n                if (!existingBug.getAssignedTo().equals(dev))\n                        throw new BugTrackingException(\n                                        \"Developer is not authorized to change the status now.\");                \n                existingBug.setSeverity(severity);\n                Bug updatedBug = bugRepo.save(existingBug);\n                return modelMap.map(updatedBug, BugDTO.class);\n        }\n\n        // Updating the Title & Description\n        @Override\n        public BugDTO updateBug(int bugId, String title, String description) {\n                Bug existingBug = bugRepo.findById(bugId)\n                                .orElseThrow(() -> new BugTrackingException(\"Bug with id : \" + bugId + \" does not exist\"));\n                existingBug.setTitle(title);\n                existingBug.setDescription(description);\n                Bug updatedBug = bugRepo.save(existingBug);\n                return modelMap.map(updatedBug, BugDTO.class);\n        }\n\n        // Retrieves a bug by ID, maps it to BugDTO, or throws an exception if not\n        // found.\n        @Override\n        public BugDTO findBugById(Integer bugId) {\n                Bug bug = bugRepo.findById(bugId)\n                                .orElseThrow(() -> new BugTrackingException(\"Bug with id : \" + bugId + \" does not exist\"));\n                return modelMap.map(bug, BugDTO.class);\n        }\n\n        // Retrieves all bugs, maps each to BugDTO, and returns the list.\n        @Override\n        public List<BugDTO> findAllBugs() {\n                List<Bug> bugList = bugRepo.findAll();\n                List<BugDTO> bugDtoList = new ArrayList<>();\n                for (Bug bug : bugList) {\n                        bugDtoList.add(modelMap.map(bug, BugDTO.class));\n                }\n                return bugDtoList;\n        }\n\n        @Override\n        public List<BugDTO> findBugsByProjectId(Integer projId) {\n                Project project = projectRepo.findById(projId)\n                                .orElseThrow(() -> new BugTrackingException(\"Project with id : \" + projId + \" does not exist\"));\n                Set<Bug> bugs = project.getBugs();\n                List<BugDTO> bugDtoList = new ArrayList<>();\n                for (Bug bug : bugs) {\n                        bugDtoList.add(modelMap.map(bug, BugDTO.class));\n                }\n                return bugDtoList;\n        }\n\n        @Override\n        public List<BugDTO> findBugsByDeveloperId(Integer devId) {\n                Developer dev = devRepo.findById(devId)\n                                .orElseThrow(() -> new BugTrackingException(\"Developer with id : \" + devId + \" does not exist\"));\n                Set<Bug> bugs = dev.getBugs();\n                List<BugDTO> bugDtoList = new ArrayList<>();\n                for (Bug bug : bugs) {\n                        bugDtoList.add(modelMap.map(bug, BugDTO.class));\n                }\n                return bugDtoList;\n        }\n\n        @Override\n        public List<BugDTO> findBugsByDeveloperIdAndStatus(Integer devId, BugStatus status) {\n                Developer dev = devRepo.findById(devId)\n                                .orElseThrow(() -> new BugTrackingException(\"Developer with id : \" + devId + \" does not exist\"));\n                Set<Bug> bugs = dev.getBugs();\n                List<BugDTO> bugDtoList = new ArrayList<>();\n                for (Bug bug : bugs) {\n                        if (bug.getBugStatus().name().equals(status))\n                                bugDtoList.add(modelMap.map(bug, BugDTO.class));\n                }\n                return bugDtoList;\n        }\n\n        @Override\n        public List<BugDTO> findBugsByStatus(BugStatus bugStatus) {\n                List<Bug> bugList = bugRepo.findByBugStatus(bugStatus);\n                List<BugDTO> bugDtoList = new ArrayList<>();\n                for (Bug bug : bugList) {\n                        bugDtoList.add(modelMap.map(bug, BugDTO.class));\n                }\n                return bugDtoList;\n        }\n\n        @Override\n        public List<BugDTO> findBugsBySeverity(Severity severity) {\n                List<Bug> bugList = bugRepo.findBugsBySeverity(severity);\n                List<BugDTO> bugDtoList = new ArrayList<>();\n                for (Bug bug : bugList) {\n                        bugDtoList.add(modelMap.map(bug, BugDTO.class));\n                }\n                return bugDtoList;\n        }\n\n        // Filters bugs by lastUpdatedDate, maps matching ones to BugDTOs, and returns\n        // the list.\n        @Override\n        public List<BugDTO> findBugsByDate(LocalDate date) {\n                List<Bug> bugList = bugRepo.findBugsByStartDate(date);\n                List<BugDTO> bugDtoList = new ArrayList<>();\n                for (Bug bug : bugList) {\n                        bugDtoList.add(modelMap.map(bug, BugDTO.class));\n                }\n                return bugDtoList;\n        }\n\n        @Override\n        public List<BugDTO> findBugsByTestEngineerId(Integer testEngId) {\n                TestEngineer tester = testEngRepo.findById(testEngId)\n                                .orElseThrow(() -> new BugTrackingException(\"Tester with id : \" + testEngId + \" does not exist\"));\n                Set<Bug> bugs = tester.getBugs();\n                List<BugDTO> bugDtoList = new ArrayList<>();\n                for (Bug b : bugs) {\n                        bugDtoList.add(modelMap.map(b, BugDTO.class));\n                }\n                return bugDtoList;\n        }\n\n        @Override\n        public List<BugDTO> findBugsByProjectIdAfterDate(Integer projId, LocalDate date) {\n                Project project = projectRepo.findById(projId)\n                                .orElseThrow(() -> new BugTrackingException(\"Project with id : \" + projId + \" does not exist\"));\n                Set<Bug> bugList = project.getBugs();\n                List<BugDTO> bugDtoList = new ArrayList<>();\n                for (Bug bug : bugList) {\n                        if (bug.getLastUpdatedDate().isAfter(date))\n                                bugDtoList.add(modelMap.map(bug, BugDTO.class));\n                }\n                return bugDtoList;\n        }\n\n        @Override\n        public void deleteBugById(Integer bugId) throws BugTrackingException {\n                Bug bug = bugRepo.findById(bugId)\n                                .orElseThrow(() -> new BugTrackingException(\"Bug with id \" + bugId + \" does not exist\"));\n\n                // We have to remove bugs from tester\n                TestEngineer tester = bug.getCreatedBy();\n                tester.getBugs().remove(bug);\n\n                // We have to remove bugs from developer may be developer is not assigned to bug\n                // so we have to check.\n                Developer dev = bug.getAssignedTo();\n                if (dev != null)\n                        dev.getBugs().remove(bug);\n\n                // We have to remove bugs from project.\n                Project project = bug.getProject();\n                project.getBugs().remove(bug);\n\n                bugRepo.delete(bug);\n        }\n\n}\n",
          "autoResize": true,
          "lineHeight": 1.25
        }
      ],
      "created": 1753541011514,
      "name": "Hello"
    }
  ]
}
